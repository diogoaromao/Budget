name: Deploy Budget API to Portainer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: budget-api

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=main-
          type=raw,value=staging,enable=true
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./Budget
        file: ./Budget/src/Budget.Api/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to Staging via Portainer API
      run: |
        # Authenticate with Portainer
        echo "Authenticating with Portainer..."
        AUTH_RESPONSE=$(curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/auth" \
          -H "Content-Type: application/json" \
          -d '{"username":"${{ secrets.PORTAINER_USERNAME }}","password":"${{ secrets.PORTAINER_PASSWORD }}"}')
        
        JWT_TOKEN=$(echo $AUTH_RESPONSE | jq -r '.jwt')
        
        if [ "$JWT_TOKEN" = "null" ]; then
          echo "Failed to authenticate with Portainer"
          exit 1
        fi
        
        echo "Successfully authenticated with Portainer"
        
        # Set variables
        IMAGE_NAME="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:staging"
        CONTAINER_NAME="budget-api-staging"
        ENDPOINT_ID="${{ secrets.PORTAINER_ENDPOINT_ID }}"
        
        # Pull the latest image
        echo "Pulling Docker image: $IMAGE_NAME"
        PULL_RESPONSE=$(curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/images/create?fromImage=$IMAGE_NAME" \
          -H "Authorization: Bearer $JWT_TOKEN")
        
        echo "Image pull response: $PULL_RESPONSE"
        
        # Stop and remove existing container if it exists
        echo "Checking for existing staging container..."
        EXISTING_CONTAINER=$(curl -s -X GET "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/json?all=true" \
          -H "Authorization: Bearer $JWT_TOKEN" | jq -r ".[] | select(.Names[] | contains(\"$CONTAINER_NAME\")) | .Id")
        
        if [ ! -z "$EXISTING_CONTAINER" ] && [ "$EXISTING_CONTAINER" != "null" ]; then
          echo "Stopping existing container: $EXISTING_CONTAINER"
          curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/$EXISTING_CONTAINER/stop" \
            -H "Authorization: Bearer $JWT_TOKEN"
          
          echo "Removing existing container: $EXISTING_CONTAINER"
          curl -s -X DELETE "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/$EXISTING_CONTAINER" \
            -H "Authorization: Bearer $JWT_TOKEN"
        fi
        
        # Create and start new container
        echo "Creating new staging container..."
        CREATE_RESPONSE=$(curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/create?name=$CONTAINER_NAME" \
          -H "Authorization: Bearer $JWT_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "Image": "'$IMAGE_NAME'",
            "Env": ["ASPNETCORE_ENVIRONMENT=Staging"],
            "ExposedPorts": {"8080/tcp": {}},
            "HostConfig": {
              "PortBindings": {"8080/tcp": [{"HostPort": "5001"}]},
              "RestartPolicy": {"Name": "unless-stopped"}
            }
          }')
        
        CONTAINER_ID=$(echo $CREATE_RESPONSE | jq -r '.Id')
        
        if [ "$CONTAINER_ID" = "null" ]; then
          echo "Failed to create container"
          echo $CREATE_RESPONSE
          exit 1
        fi
        
        echo "Starting container: $CONTAINER_ID"
        curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/$CONTAINER_ID/start" \
          -H "Authorization: Bearer $JWT_TOKEN"
        
        echo "Staging deployment completed successfully!"
        echo "Staging API available at: http://portainer-budget.romao.io:5001"

  deploy-production:
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Tag image for production
      run: |
        echo "Tagging staging image as production..."
        docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:staging
        docker tag ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:staging ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:prod
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:prod

    - name: Deploy to Production via Portainer API
      run: |
        # Authenticate with Portainer
        echo "Authenticating with Portainer..."
        AUTH_RESPONSE=$(curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/auth" \
          -H "Content-Type: application/json" \
          -d '{"username":"${{ secrets.PORTAINER_USERNAME }}","password":"${{ secrets.PORTAINER_PASSWORD }}"}')
        
        JWT_TOKEN=$(echo $AUTH_RESPONSE | jq -r '.jwt')
        
        if [ "$JWT_TOKEN" = "null" ]; then
          echo "Failed to authenticate with Portainer"
          exit 1
        fi
        
        echo "Successfully authenticated with Portainer"
        
        # Set variables
        IMAGE_NAME="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:prod"
        CONTAINER_NAME="budget-api-prod"
        ENDPOINT_ID="${{ secrets.PORTAINER_ENDPOINT_ID }}"
        
        # Pull the latest image
        echo "Pulling Docker image: $IMAGE_NAME"
        PULL_RESPONSE=$(curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/images/create?fromImage=$IMAGE_NAME" \
          -H "Authorization: Bearer $JWT_TOKEN")
        
        echo "Image pull response: $PULL_RESPONSE"
        
        # Stop and remove existing container if it exists
        echo "Checking for existing production container..."
        EXISTING_CONTAINER=$(curl -s -X GET "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/json?all=true" \
          -H "Authorization: Bearer $JWT_TOKEN" | jq -r ".[] | select(.Names[] | contains(\"$CONTAINER_NAME\")) | .Id")
        
        if [ ! -z "$EXISTING_CONTAINER" ] && [ "$EXISTING_CONTAINER" != "null" ]; then
          echo "Stopping existing container: $EXISTING_CONTAINER"
          curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/$EXISTING_CONTAINER/stop" \
            -H "Authorization: Bearer $JWT_TOKEN"
          
          echo "Removing existing container: $EXISTING_CONTAINER"
          curl -s -X DELETE "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/$EXISTING_CONTAINER" \
            -H "Authorization: Bearer $JWT_TOKEN"
        fi
        
        # Create and start new container
        echo "Creating new production container..."
        CREATE_RESPONSE=$(curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/create?name=$CONTAINER_NAME" \
          -H "Authorization: Bearer $JWT_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "Image": "'$IMAGE_NAME'",
            "Env": ["ASPNETCORE_ENVIRONMENT=Production"],
            "ExposedPorts": {"8080/tcp": {}},
            "HostConfig": {
              "PortBindings": {"8080/tcp": [{"HostPort": "5000"}]},
              "RestartPolicy": {"Name": "unless-stopped"}
            }
          }')
        
        CONTAINER_ID=$(echo $CREATE_RESPONSE | jq -r '.Id')
        
        if [ "$CONTAINER_ID" = "null" ]; then
          echo "Failed to create container"
          echo $CREATE_RESPONSE
          exit 1
        fi
        
        echo "Starting container: $CONTAINER_ID"
        curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/$ENDPOINT_ID/docker/containers/$CONTAINER_ID/start" \
          -H "Authorization: Bearer $JWT_TOKEN"
        
        echo "Production deployment completed successfully!"
        echo "Production API available at: http://portainer-budget.romao.io:5000"